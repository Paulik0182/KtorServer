package com.example

import com.example.data.*
import com.example.data.dto.*
import com.example.data.dto.counterparty.CounterpartyResponse
import com.example.data.dto.order.OrderItemResponse
import com.example.data.dto.order.OrderResponse
import com.example.data.dto.product.*
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.plugins.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import io.ktor.server.plugins.ContentTransformationException
import org.jetbrains.exposed.sql.selectAll
import org.jetbrains.exposed.sql.transactions.transaction
import java.util.Base64

/**
 * –ó–¥–µ—Å—å –æ–±—ä—è–≤–ª—è—é—Ç—Å—è –º–∞—Ä—à—Ä—É—Ç—ã (GET, POST, DELETE –∏ –¥—Ä.) (endpoints) API, –ø–æ–∑–≤–æ–ª—è—è —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö.
 */
fun Application.configureRouting() {

    /**
     * routing {} ‚Äì –±–ª–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –º–∞—Ä—à—Ä—É—Ç—ã (endpoints).
     * get("/") {} ‚Äì –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ GET-–∑–∞–ø—Ä–æ—Å–∞.
     * post("/products") {} ‚Äì –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞.
     * delete("/orders/{id}") {} ‚Äì –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ DELETE-–∑–∞–ø—Ä–æ—Å–∞.
     */
    routing {
        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        get("/") {
            call.respondText("Hello World!")
        }

        // –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
        get("/sum") {
            val a = call.request.queryParameters["a"]?.toDoubleOrNull()
            val b = call.request.queryParameters["b"]?.toDoubleOrNull()

            if (a == null || b == null) {
                call.respondText("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —É–∫–∞–∂–∏—Ç–µ —Ü—ã—Ñ—Ä—ã")
            } else {
                val sum = a + b
                call.respondText("–°—É–º–º–∞ $a –∏ $b = $sum")
                // http://127.0.0.1:8080/sum?a=5&b=10
            }
        }

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ IP
        get("/ip") {
            val ip = call.request.origin.remoteHost
            call.respondText("Your IP is $ip")
            // http://127.0.0.1/:8080/ip
        }

        /**
        * TODO –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤  !!–ü–µ—Ä–µ–¥–µ–ª–∞–Ω!!
         * */
        get("/products") {
            try {
                val products = ProductDao.getAll()
                call.respond(products)
            } catch (e: Exception) {
                e.printStackTrace()
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞: ${e.localizedMessage}")
            }
        }
        // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: http://127.0.0.1:8080/products

        /**
         * TODO –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID  !!–ü–µ—Ä–µ–¥–µ–ª–∞–Ω!!
         */
        get("/products/{id}") {
            val id = call.parameters["id"]?.toLongOrNull()
                ?: return@get call.respond(HttpStatusCode.BadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞")

            try {
                val product = ProductDao.getById(id)
                if (product != null) {
                    call.respond(product)
                } else {
                    call.respond(HttpStatusCode.NotFound, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                }
//                val product = ProductDao.getById(id) ?: return@get call.respond(
//                    HttpStatusCode.NotFound, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
//                )
//                call.respond(product)
            } catch (e: Exception) {
                e.printStackTrace()
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${e.localizedMessage}")
            }
        }
        // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: http://127.0.0.1:8080/products/5

        /**
         * TODO –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä !!–ü–µ—Ä–µ–¥–µ–ª–∞–Ω!!
         */
        post("/products") {
            try {
                val product = call.receive<ProductCreateRequest>()
                val newId = ProductDao.insert(product)
                call.respond(HttpStatusCode.Created, mapOf("–ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID = " to newId))
            } catch (e: DuplicateProductNameException) {
                call.respond(
                    HttpStatusCode.Conflict, // 409 - –∫–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö
                    mapOf("error" to "duplicate_name", "message" to e.message)
                )
            }
        }
        // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (cURL):
        // curl -X POST http://127.0.0.1:8080/products -H "Content-Type: application/json" -d '{...}'

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤ —Ç–æ–≤–∞—Ä–∞
        get("/products/{id}/codes") {
            val productId = call.parameters["id"]?.toLongOrNull()
                ?: return@get call.respond(HttpStatusCode.BadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")

            try {
                val codes = ProductDao.getProductCodes(productId)
                call.respond(codes)
            } catch (e: Exception) {
                e.printStackTrace()
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞: ${e.localizedMessage}")
            }
        }
        // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: http://127.0.0.1:8080/products/5/codes

//                val images = transaction {
//                    ProductImages.selectAll().where { ProductImages.productId eq productId }
//                        .map {
//                            ProductImageResponse(
//                                id = it[ProductImages.id],
//                                productId = it[ProductImages.productId],
//                                imageBase64 = Base64.getEncoder().encodeToString(it[ProductImages.imageBase64])
//                            )
//                        }

        // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞
        get("/products/{id}/images") {
            val productId = call.parameters["id"]?.toLongOrNull()
                ?: return@get call.respond(HttpStatusCode.BadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞")

            try {
                val images = ProductDao.getProductImages(productId)
                call.respond(images)
            } catch (e: Exception) {
                e.printStackTrace()
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞: ${e.localizedMessage}")
            }
        }
        // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: http://127.0.0.1:8080/products/5/images

        // üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        post("/products/{id}/images") {
//            val productId = call.parameters["id"]?.toLongOrNull()
//                ?: return@post call.respond(HttpStatusCode.BadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞")
//
//            try {
//                val params = call.receive<Map<String, String>>()
//                val imageBase64 = params["image"]
//                    ?: return@post call.respond(HttpStatusCode.BadRequest, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
//
//                val imageBytes = Base64.getDecoder().decode(imageBase64)
//                val id = ProductDao.insertProductImages(productId, listOf(ProductImageResponse(null, productId, imageBase64)))
////                val id = ProductImageDao.insert(productId, imageBytes)
//                call.respond(HttpStatusCode.Created, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å ID = $id")
//            } catch (e: Exception) {
//                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞: ${e.localizedMessage}")
//            }
        }
        // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (cURL):
        // curl -X POST http://127.0.0.1:8080/products/5/images -H "Content-Type: application/json" -d '{"image": "..." }'

//        get("/products/{id}/links") {
//            val productId = call.parameters["id"]?.toIntOrNull() ?: return@get call.respond(
//                HttpStatusCode.BadRequest, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞"
//            )
//            try {
//                val links = transaction {
//                    ProductLinks.selectAll().where { ProductLinks.productId eq productId }
//                        .map {
//                            ProductLinkResponse(
//                                id = it[ProductLinks.id],
//                                productId = it[ProductLinks.productId],
//                                counterpartyId = it[ProductLinks.counterpartyId],
//                                url = it[ProductLinks.url]
//                            )
//                        }
//                }
//                call.respond(links)
//            } catch (e: Exception) {
//                e.printStackTrace()
//                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${e.localizedMessage}")
//            }
//        }
//
//        post("/products/{id}/links") {
//            val productId = call.parameters["id"]?.toIntOrNull() ?: return@post call.respond(
//                HttpStatusCode.BadRequest,
//                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞"
//            )
//            val params = call.receive<Map<String, String>>()
//            val counterpartyId = params["counterpartyId"]?.toIntOrNull() ?: return@post call.respond(
//                HttpStatusCode.BadRequest,
//                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞"
//            )
//            val url = params["url"] ?: return@post call.respond(HttpStatusCode.BadRequest, "URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
//
//            val id = ProductLinkDao.insert(productId, counterpartyId, url)
//            call.respond("–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID = $id")
//        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        delete("/products/{id}") {
            val id = call.parameters["id"]?.toLongOrNull()
                ?: return@delete call.respond(HttpStatusCode.BadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞")

            try {
                ProductDao.delete(id)
                call.respond(HttpStatusCode.OK, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
            } catch (e: Exception) {
                e.printStackTrace()
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞: ${e.localizedMessage}")
            }
        }
        // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: DELETE http://127.0.0.1:8080/products/5

        /**
         * TODO –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞  !!–ü–µ—Ä–µ–¥–µ–ª–∞–Ω!!
         */
        put("/products/{id}") {
            val id = call.parameters["id"]?.toLongOrNull()
                ?: return@put call.respond(HttpStatusCode.BadRequest, mapOf("error" to "invalid_id", "message" to "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞"))

            try {
                val product = call.receive<ProductCreateRequest>()
                println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: ID=$id, Name=${product.name}, Categories=${product.categories}")

                ProductDao.update(id, product)
                call.respond(HttpStatusCode.OK, mapOf("message" to "–ü—Ä–æ–¥—É–∫—Ç $id —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω"))
            } catch (e: IllegalArgumentException) {
                call.respond(HttpStatusCode.BadRequest, mapOf("error" to "invalid_data", "message" to e.localizedMessage))
            } catch (e: ContentTransformationException) {
                call.respond(HttpStatusCode.BadRequest, mapOf("error" to "bad_request", "message" to "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: ${e.localizedMessage}"))
            } catch (e: CustomHttpException) {
                call.respond(e.status, e.response)
            } catch (e: Exception) {
                e.printStackTrace()
                call.respond(HttpStatusCode.InternalServerError, mapOf("error" to "internal_error", "message" to e.localizedMessage))
            }
        }
        // curl -X PUT http://127.0.0.1:8080/products/5 -H "Content-Type: application/json" -d '{...}'

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞
         */
        get("/products/{id}/suppliers") {
            val productId = call.parameters["id"]?.toLongOrNull()
                ?: return@get call.respond(HttpStatusCode.BadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")

            try {
                val suppliers = ProductDao.getProductSuppliers(productId)
                call.respond(suppliers)
//                call.respond(suppliers.map { it[Counterparties.name] })
            } catch (e: Exception) {
                e.printStackTrace()
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞: ${e.localizedMessage}")
            }
        }
        // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: http://127.0.0.1:8080/products/5/suppliers

        /**
         * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∫ —Ç–æ–≤–∞—Ä—É
         */
        post("/products/{productId}/suppliers/{supplierId}") {
            // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            val productId = call.parameters["productId"]?.toLongOrNull()
            val supplierId = call.parameters["supplierId"]?.toLongOrNull()

            if (productId != null && supplierId != null) {
//                ProductDao.insertProductSuppliers(productId, listOf(ProductSupplierResponse(null, productId, supplierId)))
                call.respond(HttpStatusCode.OK, "–ü–æ—Å—Ç–∞–≤—â–∏–∫ $supplierId –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–æ–≤–∞—Ä—É $productId")
            } else {
                call.respond(HttpStatusCode.BadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
            }
        }
        // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: POST http://127.0.0.1:8080/products/5/suppliers/3

//        // –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ—Ç —Ç–æ–≤–∞—Ä–∞
//        delete("/products/{productId}/suppliers/{supplierId}") {
//            val productId = call.parameters["productId"]?.toIntOrNull()
//            val supplierId = call.parameters["supplierId"]?.toIntOrNull()
//            if (productId != null && supplierId != null) {
//                ProductSupplierDao.removeSupplierFromProduct(productId, supplierId)
//                call.respond("–ü–æ—Å—Ç–∞–≤—â–∏–∫ $supplierId —É–¥–∞–ª—ë–Ω –æ—Ç —Ç–æ–≤–∞—Ä–∞ $productId")
//            } else {
//                call.respond("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
//            }
//            // DELETE /products/5/suppliers/3
//            // –û—Ç–≤–µ—Ç: "–ü–æ—Å—Ç–∞–≤—â–∏–∫ 3 —É–¥–∞–ª—ë–Ω –æ—Ç —Ç–æ–≤–∞—Ä–∞ 5"
//        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ—Ç —Ç–æ–≤–∞—Ä–∞
//        delete("/products/{productId}/suppliers/{supplierId}") {
//            val productId = call.parameters["productId"]?.toLongOrNull()
//            val supplierId = call.parameters["supplierId"]?.toLongOrNull()
//
//            if (productId != null && supplierId != null) {
//                ProductDao.removeSupplierFromProduct(productId, supplierId)
//                call.respond(HttpStatusCode.OK, "–ü–æ—Å—Ç–∞–≤—â–∏–∫ $supplierId —É–¥–∞–ª–µ–Ω –æ—Ç —Ç–æ–≤–∞—Ä–∞ $productId")
//            } else {
//                call.respond(HttpStatusCode.BadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
//            }
//        }
        // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: DELETE http://127.0.0.1:8080/products/5/suppliers/3

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
        get("/counterparties") {
            try {
                val counterparties = CounterpartyDao.getAll().map {
//                    CounterpartyResponse(
//                        id = it[Counterparties.id],
//                        name = it[Counterparties.name],
//                        type = it[Counterparties.type],
//                        isSupplier = it[Counterparties.isSupplier],
//                        productCountOld = it[Counterparties.productCountOld]
//                    )
                }
                call.respond(counterparties) // —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            } catch (e: Exception) {
                e.printStackTrace()
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${e.localizedMessage}")
            }
            // http://127.0.0.1:8080/counterparties
        }

        get("/counterparties/{id}") {
            val id = call.parameters["id"]?.toIntOrNull() ?: return@get call.respond(
                HttpStatusCode.BadRequest, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞"
            )

            try {
//                val counterparty = CounterpartyDao.getById(id) ?: return@get call.respond(
//                    HttpStatusCode.NotFound, "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
//                )

//                call.respond(
//                    CounterpartyResponse(
//                        id = counterparty[Counterparties.id],
//                        name = counterparty[Counterparties.name],
//                        type = counterparty[Counterparties.type],
//                        isSupplier = counterparty[Counterparties.isSupplier],
//                        productCountOld = counterparty[Counterparties.productCountOld]
//                    )
//                )
            } catch (e: Exception) {
                e.printStackTrace()
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${e.localizedMessage}")
            }
        }

        // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        get("/counterparties/{id}/products") {
            val id = call.parameters["id"]?.toIntOrNull()
            if (id != null) {
//                val products = CounterpartyDao.getProductsBySupplier(id)
//                call.respond(products.map { it[Products.name] })
            } else {
                call.respond("–ù–µ–≤–µ—Ä–Ω—ã–π ID")
            }
        }

        // TODO –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞ (–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞)
        post("/counterparties") {
            try {
                val counterparty = call.receive<CounterpartyResponse>() // –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–±—ä–µ–∫—Ç
//                val id = CounterpartyDao.insert(counterparty.name, counterparty.type)
//                call.respond(HttpStatusCode.Created, "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID = $id")
            } catch (e: Exception) {
                e.printStackTrace()
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: ${e.localizedMessage}")
            }
        }

        // TODO - –†–∞–±–æ—Ç–∞–µ—Ç - –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞ (–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞)
        delete("/counterparties/{id}") {
            val id = call.parameters["id"]?.toIntOrNull()
            if (id != null) {
//                CounterpartyDao.deleteWithProducts(id)
//                call.respond("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç $id —É–¥–∞–ª—ë–Ω")
            } else {
                call.respond("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞")
            }
        }

        // TODO –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        put("/counterparties/{id}") {
            try {
                val id = call.parameters["id"]?.toIntOrNull() ?: return@put call.respond(
                    HttpStatusCode.BadRequest,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"
                )
                val counterparty = call.receive<CounterpartyResponse>()
//                CounterpartyDao.update(id, counterparty.name, counterparty.type)
//                call.respond(HttpStatusCode.OK, "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç $id –æ–±–Ω–æ–≤–ª–µ–Ω")
            } catch (e: Exception) {
                e.printStackTrace()
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ${e.localizedMessage}")
            }
        }

        // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
        get("/orders") {
            try {
                call.respond(OrderDao.getAll().map { order ->
                    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
//                    val counterparty = CounterpartyDao.getById(order[Orders.counterpartyId])

//                    OrderResponse(
//                        id = order[Orders.id],
//                        orderDate = order[Orders.orderDate].toString(),
//                        counterpartyId = order[Orders.counterpartyId],
//                        counterpartyName = counterparty?.get(Counterparties.name)
//                            ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", // üîπ –î–æ–±–∞–≤–∏–ª–∏!
//                        items = OrderItemDao.getItemsByOrder(order[Orders.id]).map { row ->
//                            OrderItemResponse(
//                                id = row[OrderItems.id],
//                                orderId = row[OrderItems.orderId],
//                                productId = row[OrderItems.productId],
//                                productName = row[Products.name],
//                                supplierId = row[OrderItems.supplierId],
//                                quantity = row[OrderItems.quantity]
//                            )
//                        }
//                    )
                })
            } catch (e: Exception) {
                e.printStackTrace()
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${e.localizedMessage}")
            }
        }

        // –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–ª–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
        get("/orders/{id}") {
            val id = call.parameters["id"]?.toIntOrNull()
            if (id == null) {
                call.respond(HttpStatusCode.BadRequest, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞")
                return@get
            }

            try {
//                val order = OrderDao.getById(id)
//                if (order == null) {
//                    call.respond(HttpStatusCode.NotFound, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
//                    return@get
//                }

                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –ø–æ ID
//                val counterparty = CounterpartyDao.getById(order[Orders.counterpartyId])

                // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
//                val items = OrderItemDao.getItemsByOrder(id).map { item ->
//                    val product = ProductDao.getById(item[OrderItems.productId])
//                    OrderItemResponse(
//                        id = item[OrderItems.id],
//                        orderId = id,
//                        productId = item[OrderItems.productId],
//                        productName = product?.name ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç",
//                        supplierId = item[OrderItems.supplierId],
//                        quantity = item[OrderItems.quantity]
//                    )
//                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
//                val orderResponse = OrderResponse(
//                    id = order[Orders.id],
//                    orderDate = order[Orders.orderDate].toString(), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É
//                    counterpartyId = order[Orders.counterpartyId],
//                    counterpartyName = counterparty?.get(Counterparties.name) ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç",
//                    items = items
//                )

//                call.respond(orderResponse)
            } catch (e: Exception) {
                e.printStackTrace()
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${e.localizedMessage}")
            }
        }

        // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
        get("/orders/{id}/items") {
            val id = call.parameters["id"]?.toIntOrNull()
            if (id != null) {
//                val items = OrderDao.getOrderItems(id)
//                call.respond(items.map { it[Products.name] })
            } else {
                call.respond("–ù–µ–≤–µ—Ä–Ω—ã–π ID")
            }
        }

        // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        post("/orders") {
            try {
                val request = call.receive<OrderResponse>()
//                val orderId = OrderDao.insert(request.counterpartyId)

                request.items.forEach { item ->
//                    OrderItemDao.insert(orderId, item.productId, item.supplierId, item.quantity)
                }

//                call.respond(HttpStatusCode.Created, "–ó–∞–∫–∞–∑ $orderId —Å–æ–∑–¥–∞–Ω")
            } catch (e: Exception) {
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞: ${e.localizedMessage}")
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        put("/orders/{id}") {
            try {
                val id = call.parameters["id"]?.toIntOrNull() ?: return@put call.respond(
                    HttpStatusCode.BadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"
                )

                val request = call.receive<OrderResponse>()
//                OrderDao.update(id, request.counterpartyId)

                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
//                OrderItemDao.deleteItemsByOrder(id)
                request.items.forEach { item ->
//                    OrderItemDao.insert(id, item.productId, item.supplierId, item.quantity)
                }

                call.respond(HttpStatusCode.OK, "–ó–∞–∫–∞–∑ $id –æ–±–Ω–æ–≤–ª–µ–Ω")
            } catch (e: Exception) {
                call.respond(HttpStatusCode.InternalServerError, "–û—à–∏–±–∫–∞: ${e.localizedMessage}")
            }
        }

        // —É–¥–∞–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Ç–æ–≤–∞—Ä—ã –≤ order_items.
        delete("/orders/{id}") {
            val id = call.parameters["id"]?.toIntOrNull()
            if (id != null) {
//                OrderDao.deleteWithItems(id)
//                call.respond("–ó–∞–∫–∞–∑ $id —É–¥–∞–ª—ë–Ω")
            } else {
                call.respond("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞")
            }
        }
    }
}
